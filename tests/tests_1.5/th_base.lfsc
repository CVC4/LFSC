

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Theory of Equality and Congruence Closure
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Deps: smt.plf

; sorts :

(declare arrow (-> sort sort sort))	; function constructor

; functions :

; apply
(declare . (var s1 sort) (var s2 sort)
  (-> (term (arrow s1 s2)) (term s1) (term s2)))


; inference rules :

(declare-rule trust 

;------------------
  (th_holds false)
)	; temporary


(declare-rule trust_f (var f formula)

;--------------
  (th_holds f)
) ; temporary

(declare-rule refl 
  (var s sort) (var t (term s))

;----------------------
  (th_holds (= _ t t))
)

(declare-rule symm 
  (var s sort) 
  (var x (term s)) (var y (term s))

  (th_holds (= _ x y))
;----------------------
  (th_holds (= _ y x))
)

(declare-rule trans 
  (var s sort) 
  (var x (term s)) (var y (term s)) (var x (term s))

  (th_holds (= _ x y))  (th_holds (= _ y z))
;--------------------------------------------
  (th_holds (= _ x z))
)

(declare-rule negsymm
  (var s sort) (var x (term s)) (var y (term s))

  (th_holds (not (= _ x y)))
;----------------------------
  (th_holds (not (= _ y x)))
)

(declare-rule negtrans1
  (var s sort) 
  (var x (term s)) (var y (term s)) (var x (term s))

  (th_holds (not (= _ x y)))  (th_holds (= _ y z))
;--------------------------------------------------
  (th_holds (not (= _ x z)))
)

(declare-rule negtrans2 
  (var s sort) 
  (var x (term s)) (var y (term s)) (var x (term s))

  (th_holds (= _ x y))  (th_holds (not (= _ y z)))
;--------------------------------------------------
  (th_holds (not (= _ x z)))
)

(declare-rule cong 
  (var s1 sort) (var s2 sort)
  (var f (term (arrow s1 s2)))
  (var g (term (arrow s1 s2)))
  (var x (term s1)) 
  (var y (term s1))

  (th_holds (= _ f g))  (th_holds (= _ x y))
;------------------------------------------------------
  (th_holds (= _ (. _ _ f x) (. _ _ g y)))
)
